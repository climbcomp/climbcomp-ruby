#!/usr/bin/env bash
set -euo pipefail

CURRENT_BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"

GEM_HOST_API_KEY=${GEM_HOST_API_KEY:?} # Required
GH_TOKEN=${GH_TOKEN:?} # Required
TRAVIS_BRANCH=${TRAVIS_BRANCH:-$CURRENT_BRANCH}
TRAVIS_PULL_REQUEST=${TRAVIS_PULL_REQUEST:-false}
TRAVIS_REPO_SLUG=${TRAVIS_REPO_SLUG:?} # Required
VERSION_SRC_PATH=${VERSION_SRC_PATH:?} # Required

REPO_URL="https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git"
# shellcheck disable=SC2002
VERSION="$(cat ./VERSION | xargs)"
GIT_TAG="v${VERSION}"


# Additional commits may have been pushed in between the time Travis
# was notified and when it cloned. Travis clones in detatched HEAD mode to work
# around this, but we plan on returning to $TRAVIS_BRANCH so we can commit
# version changes. Guard against this explicitly.
function ensure-branch-matches-head {
    local head_ref
    local branch_ref
    head_ref=$(git rev-parse HEAD)
    if [ "${head_ref}" == "" ]; then
        echo " -> Failed to get HEAD reference!"
        return 1
    fi
    branch_ref=$(git rev-parse "${TRAVIS_BRANCH}")
    if [ "${branch_ref}" == "" ]; then
        echo "-> Failed to get ${TRAVIS_BRANCH} reference!"
        return 1
    fi
    if [ "${head_ref}" != "${branch_ref}" ]; then
        echo " -> HEAD ref (${head_ref}) does not match ${TRAVIS_BRANCH} ref (${branch_ref})!"
        return 1
    fi
}

function ensure-branch-is-master {
    if [ "${TRAVIS_BRANCH}" != "master" ]; then
        echo " -> TRAVIS_BRANCH is not master: ${TRAVIS_BRANCH}"
        exit 0
    fi
}

function ensure-not-pull-request {
    if [ "${TRAVIS_PULL_REQUEST}" != "false" ]; then
        echo " -> TRAVIS_PULL_REQUEST is not false: ${TRAVIS_PULL_REQUEST}"
        exit 0
    fi
}

function ensure-not-already-tagged {
    echo " -> Fetching latest tags"
    git fetch --tags "${REPO_URL}" > /dev/null 2>&1
    if [ "$(git tag -l "${GIT_TAG}")" != "" ]; then
        echo " -> Tag already exists: ${GIT_TAG}"
        exit 0
    fi
}

function ensure-not-already-published {
    # This is the simplest way to find out whether a given version exists.
    # The alternative is to parse the /api/v1/versions response.
    local url="https://rubygems.org/api/v1/downloads/climbcomp-${VERSION}.json"
    local response
    response=$(curl -sL -w "%{http_code}" -o /dev/null -I "${url}")
    if [ "${response}" == "200" ]; then
        echo " -> Version already exists on rubygems.org: ${VERSION}"
        exit 0
    fi
}

function update-version-src {
    echo " -> Checking out ${TRAVIS_BRANCH}"
    git checkout "${TRAVIS_BRANCH}"
    echo " -> Updating ${VERSION_SRC_PATH} to ${VERSION}"
    sed -i.bak "s/VERSION = \"[^\"]*\"/VERSION = \"${VERSION}\"/" "${VERSION_SRC_PATH}"
    rm -f "${VERSION_SRC_PATH}.bak"
}

function configure-git {
    echo " -> Configuring git user"
    if [ "$(git config user.email)" == "" ]; then
        git config user.email "travis@travis-ci.org"
    fi
    if [ "$(git config user.name)" == "" ]; then
        git config user.name "Travis CI"
    fi
}

function commit-and-push {
    echo " -> Checking for changes"
    git add -N .
    if ! git diff --exit-code > /dev/null; then
        echo " -> Committing changes"
        git add .
        git commit -m "chore(release): ${VERSION} [skip ci]"
        echo " -> Pushing changes"
        git push -q "${REPO_URL}" "${TRAVIS_BRANCH}" > /dev/null 2>&1
    else
        echo " -> No changes to commit"
    fi
}

function create-git-tag {
    echo " -> Tagging new version: ${GIT_TAG}"
    git tag -a "${GIT_TAG}" -m "Release of version ${VERSION}"
    git push -q "${REPO_URL}" --tags > /dev/null 2>&1
}

function publish-gem {
    mkdir -p ~/.gem
    touch ~/.gem/credentials
    chmod 0600 ~/.gem/credentials
    printf -- "---\n:rubygems_api_key: %s\n" "${GEM_HOST_API_KEY}" > ~/.gem/credentials

    echo " -> Building gem version: ${VERSION}"
    rm -f "./pkg/climbcomp-${VERSION}.gem"
    rake build
    echo " -> Pushing gem version: ${VERSION}"
    gem push "./pkg/climbcomp-${VERSION}.gem"

    rm -f ~/.gem/credentials
}


ensure-branch-is-master
ensure-branch-matches-head
ensure-not-pull-request
ensure-not-already-tagged
ensure-not-already-published

update-version-src

configure-git
commit-and-push
create-git-tag

publish-gem
